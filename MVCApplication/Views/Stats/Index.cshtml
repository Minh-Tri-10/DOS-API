@{
    ViewData["Title"] = "Thống kê";
    var defaultStart = DateTime.Today.AddDays(-7).ToString("yyyy-MM-dd");
    var defaultEnd = DateTime.Today.ToString("yyyy-MM-dd");
    Layout = "_Layout.Admin";
}

<link rel="preconnect" href="https://cdn.jsdelivr.net" crossorigin>
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>

<div class="page">
    <div class="container">
        <div class="card shell">

            <div class="header">
                <div class="header__top">
                    <div class="title">Báo cáo doanh thu</div>
                </div>
            </div>

            <div class="panel">
                <div class="toolbar">
                    <div class="control">
                        <label>Start</label>
                        <input id="start" type="date" value="@defaultStart" />
                    </div>
                    <div class="control">
                        <label>End</label>
                        <input id="end" type="date" value="@defaultEnd" />
                    </div>
                    <div class="control">
                        <label>Granularity</label>
                        <select id="granularity">
                            <option value="day" selected>Day</option>
                            <option value="week">Week</option>
                            <option value="month">Month</option>
                        </select>
                    </div>
                    <div class="control">
                        <label>&nbsp;</label>
                        <button id="applyBtn" class="primary" type="button">Apply</button>
                    </div>
                    <div class="control">
                        <label>&nbsp;</label>
                        <button id="resetBtn" type="button">7 ngày gần nhất</button>
                    </div>
                    <div class="control">
                        <label>&nbsp;</label>
                        <button id="exportBtn" type="button">Export 📄</button>
                    </div>
                </div>
            </div>

            <div class="panel">
                <div class="section__title">Tổng quan</div>
                <div class="kpis">
                    <div class="kpi"><div class="hint"><span class="dot"></span>Tổng đơn</div><div id="kTotal" class="value skel">—</div></div>
                    <div class="kpi"><div class="hint"><span class="dot ok"></span>Đã thanh toán</div><div id="kPaid" class="value skel">—</div></div>
                    <div class="kpi"><div class="hint"><span class="dot bad"></span>Hủy</div><div id="kCancelled" class="value skel">—</div></div>
                    <div class="kpi"><div class="hint">💰 Doanh thu</div><div id="kRevenue" class="value skel">—</div></div>
                    <div class="kpi"><div class="hint">📦 AOV</div><div id="kAov" class="value skel">—</div></div>
                </div>
            </div>

            <div class="grid">
                <div class="panel">
                    <div class="section__title">Doanh thu theo thời gian</div>
                    <div class="canvas-wrap skel"><canvas id="seriesChart"></canvas></div>
                </div>
                <div class="panel">
                    <div class="section__title">Doanh thu theo danh mục</div>
                    <div class="canvas-wrap skel"><canvas id="categoryChart"></canvas></div>
                </div>
                <div class="panel" style="grid-column:1/-1;">
                    <div class="section__title">Top sản phẩm</div>
                    <div class="table-wrap skel">
                        <table id="productTable">
                            <thead><tr><th>Sản phẩm</th><th>SL</th><th>Doanh thu</th></tr></thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

<div id="toast" class="toast" role="alert" aria-live="polite"></div>

<style>
    /* ===================== THEME TOKENS (dark base) ===================== */
    :root {
        --bg: #0b0f1a;
        --bg-soft: #0e1424;
        --panel: #0f172a99;
        --panel-solid: #111827;
        --text: #e7ecf6;
        --muted: #9aa6bf;
        --border: rgba(148,163,184,.22);
        --ring: rgba(124,58,237,.35);
        --accent: #7c3aed;
        --accent2: #22d3ee;
        --ok: #10b981;
        --warn: #f59e0b;
        --bad: #ef4444;
        --shadow-1: 0 24px 60px rgba(2,8,23,.35);
        --radius: 16px;
        --gap: 16px;
    }

        /* ===================== LIGHT THEME (đồng bộ layout) ===================== */
        :root[data-theme="light"] {
            --bg: #f6f7fb;
            --bg-soft: #ffffff;
            --panel: #ffffffcc;
            --panel-solid: #ffffff;
            --text: #0f172a;
            --muted: #6b7280;
            --border: rgba(15,23,42,.12);
            --ring: rgba(99,102,241,.25);
            --accent: #7c3aed;
            --accent2: #22d3ee;
            --shadow-1: 0 16px 40px rgba(2,8,23,.08);
        }

            /* Tuning light giống Users page */
            :root[data-theme="light"] .card.shell {
                background: linear-gradient(180deg, color-mix(in oklab,var(--panel) 92%,transparent), color-mix(in oklab,#fff 88%,transparent));
                box-shadow: var(--shadow-1);
            }

                :root[data-theme="light"] .card.shell::before {
                    opacity: .28;
                    filter: blur(8px);
                }

            :root[data-theme="light"] .panel {
                background: var(--panel-solid);
                box-shadow: none;
            }

            :root[data-theme="light"] thead th {
                background: linear-gradient(180deg,rgba(0,0,0,.03),rgba(0,0,0,.01));
                border-bottom: 1px solid var(--border);
                color: var(--muted);
            }

            :root[data-theme="light"] tbody tr:nth-child(even) {
                background: linear-gradient(0deg,rgba(0,0,0,.02),transparent);
            }

            :root[data-theme="light"] tbody tr:hover {
                background: linear-gradient(0deg,rgba(0,0,0,.03),transparent), linear-gradient(90deg,color-mix(in oklab,var(--accent) 18%,transparent),transparent 40%);
            }

            :root[data-theme="light"] .kpi {
                background: linear-gradient(180deg,#fff,#f8fafc);
                border-color: var(--border);
            }

            :root[data-theme="light"] .skel::after {
                background: linear-gradient(90deg,transparent,rgba(0,0,0,.06),transparent);
            }

            :root[data-theme="light"] .table-wrap {
                border-color: var(--border);
            }

            :root[data-theme="light"] .toast {
                background: #fff;
                border-color: var(--border);
            }

            :root[data-theme="light"] .card.shell::after {
                opacity: .25;
            }

    /* ========== Base ========== */
    html, body {
        background: var(--bg);
        color: var(--text);
    }

    * {
        box-sizing: border-box;
    }

    h1, h2, h3, h4 {
        margin: 0;
    }

    .page {
        display: grid;
        gap: var(--gap);
        padding: 10px;
    }

    @@media (min-width:1024px) {
        .page {
            padding: 14px;
        }
    }

    .container {
        max-width: 1280px;
        margin: 0 auto;
    }

    /* ===== Glassy lớn duy nhất ===== */
    .card.shell {
        position: relative;
        isolation: isolate;
        overflow: hidden; /* ✅ hidden overflow */
        border: 1px solid var(--border);
        border-radius: var(--radius);
        background: linear-gradient(180deg, color-mix(in oklab,var(--panel) 88%,transparent), color-mix(in oklab,var(--bg-soft) 76%,transparent));
        backdrop-filter: blur(10px) saturate(1.05);
        box-shadow: var(--shadow-1);
        padding: 20px;
        gap: 30px;
    }

        .card.shell::before {
            content: "";
            position: absolute;
            inset: -1px;
            border-radius: inherit;
            z-index: -1;
            background: conic-gradient(from 200deg, color-mix(in oklab,var(--accent) 28%,transparent), color-mix(in oklab,var(--accent2) 28%,transparent), transparent 45%);
            filter: blur(10px) saturate(1.1);
            opacity: .35;
            pointer-events: none;
            animation: spin 18s linear infinite;
        }

    /* ===== Panel con phẳng (không viền xoay) ===== */
    .panel {
        border: 1px solid var(--border);
        border-radius: var(--radius);
        background: var(--panel-solid);
        box-shadow: none;
        padding: 14px;
    }

        .panel::before {
            content: none !important;
        }
    /* không viền xoay */

    .header {
        display: grid;
        gap: 8px;
        margin-bottom: var(--gap);
    }

    .header__top {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 12px;
    }

    .title {
        font-weight: 900;
        font-size: clamp(20px,2vw,28px);
    }

    /* Toolbar controls */
    .toolbar {
        display: grid;
        gap: 12px;
    }

    @@media (min-width:760px) {
        .toolbar {
            grid-template-columns: repeat(6,minmax(0,1fr)); /* Thay đổi từ 5 cột sang 6 cột để chứa nút Export */
            align-items: end;
        }
    }

    .control {
        display: grid;
        gap: 6px;
    }

    label {
        font-size: 12px;
        color: var(--muted);
    }

    input[type="date"], select, button {
        width: 100%;
        padding: 10px 12px;
        border-radius: 12px;
        border: 1px solid var(--border);
        background: var(--panel-solid);
        color: var(--text);
    }

        button.primary {
            border: none;
            color: #fff;
            font-weight: 800;
            background: linear-gradient(90deg,var(--accent),var(--accent2));
            box-shadow: var(--shadow-1);
            cursor: pointer;
        }

            button.primary:hover {
                filter: brightness(1.06);
            }

            button.primary:active {
                transform: translateY(1px);
            }

    .grid {
        display: grid;
        gap: var(--gap);
        grid-template-columns: 1fr;
    }

    @@media (min-width:1100px) {
        .grid {
            grid-template-columns: 1.3fr .7fr;
        }
    }

    .section__title {
        font-weight: 800;
        margin-bottom: 10px;
    }

    .kpis {
        display: grid;
        gap: 12px;
        grid-template-columns: repeat(2,minmax(0,1fr));
    }

    @@media (min-width:860px) {
        .kpis {
            grid-template-columns: repeat(5,minmax(0,1fr));
        }
    }

    .kpi {
        border: 1px solid var(--border);
        border-radius: 14px;
        background: color-mix(in oklab,var(--panel-solid) 88%,transparent);
        padding: 14px;
        display: grid;
        gap: 6px;
    }

        .kpi .hint {
            color: var(--muted);
            font-size: 12px;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .kpi .value {
            font-weight: 900;
            font-size: clamp(20px,2.4vw,28px);
        }

    .dot {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        display: inline-block;
    }

        .dot.ok {
            background: var(--ok);
        }

        .dot.warn {
            background: var(--warn);
        }

        .dot.bad {
            background: var(--bad);
        }

    .canvas-wrap {
        position: relative;
        min-height: 240px;
    }

    canvas {
        width: 100%;
        height: 240px;
    }

    .table-wrap {
        overflow: auto;
        border-radius: 12px;
        border: 1px solid var(--border);
    }

    table {
        width: 100%;
        border-collapse: collapse;
        min-width: 560px;
    }

    thead th {
        position: sticky;
        top: 0;
        background: var(--panel-solid);
        border-bottom: 1px solid var(--border);
        padding: 10px;
        text-align: left;
        font-size: 12px;
        color: var(--muted);
    }

    tbody td {
        border-bottom: 1px solid var(--border);
        padding: 10px;
    }

    tbody tr:hover {
        background: color-mix(in oklab,var(--panel-solid) 86%,transparent);
    }

    /* Skeleton */
    .skel {
        position: relative;
        overflow: hidden;
        background: color-mix(in oklab,var(--panel-solid) 86%,transparent);
    }

        .skel::after {
            content: "";
            position: absolute;
            inset: 0;
            transform: translateX(-100%);
            background: linear-gradient(90deg,transparent,rgba(255,255,255,.08),transparent);
            animation: shimmer 1.2s infinite;
        }

    @@keyframes shimmer {
        100% {
            transform: translateX(100%);
        }
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    /* Toast */
    .toast {
        position: fixed;
        right: 14px;
        bottom: 14px;
        z-index: 50;
        display: none;
        background: var(--panel-solid);
        border: 1px solid var(--border);
        border-radius: 12px;
        padding: 10px 14px;
        box-shadow: var(--shadow-1);
    }

        .toast.show {
            display: block;
        }
</style>

<script>
    let seriesChart, categoryChart, loading=false;
    const fmt = n => new Intl.NumberFormat().format(n ?? 0);
    const toIsoMidnight = ymd => new Date(ymd+'T00:00:00').toISOString();

    async function jget(url){
      const r=await fetch(url,{headers:{'Accept':'application/json'}});
      const t=await r.text(); if(!r.ok) throw new Error(`API ${r.status}: ${t}`);
      return JSON.parse(t);
    }
    function toast(msg){
      const el=document.getElementById('toast');
      el.textContent=msg; el.classList.add('show');
      setTimeout(()=>el.classList.remove('show'),3000);
    }
    function setRangeLast7(){
      const today=new Date(); const start=new Date(today);
      start.setDate(start.getDate()-7);
      const toYMD=d=>new Date(d.getTime()-d.getTimezoneOffset()*60000).toISOString().slice(0,10);
      document.getElementById('start').value=toYMD(start);
      document.getElementById('end').value=toYMD(today);
    }
    function setLoading(on){
      document.querySelectorAll('.canvas-wrap,.table-wrap,.value')
              .forEach(x=>x.classList.toggle('skel',on));
    }

    /* —— Chart colors follow CSS variables —— */
    function chartColorsFromCSS(){
      const css=getComputedStyle(document.documentElement);
      return {
        text:(css.getPropertyValue('--text')||'#0f172a').trim(),
        grid:(css.getPropertyValue('--border')||'rgba(15,23,42,.12)').trim()
      };
    }
    function buildLineChart(ctx, labels, data){
      const c=chartColorsFromCSS();
      return new Chart(ctx,{
        type:'line',
        data:{labels,datasets:[{label:'Revenue',data,tension:.35}]},
        options:{
          responsive:true,maintainAspectRatio:false,
          scales:{
            x:{ticks:{color:c.text},grid:{color:c.grid}},
            y:{beginAtZero:true,ticks:{color:c.text},grid:{color:c.grid}}
          },
          plugins:{legend:{labels:{color:c.text}}}
        }
      });
    }
    function buildBarChart(ctx, labels, data){
      const c=chartColorsFromCSS();
      return new Chart(ctx,{
        type:'bar',
        data:{labels,datasets:[{label:'Revenue',data}]},
        options:{
          indexAxis:'y',responsive:true,maintainAspectRatio:false,
          scales:{
            x:{beginAtZero:true,ticks:{color:c.text},grid:{color:c.grid}},
            y:{ticks:{color:c.text},grid:{color:c.grid}}
          },
          plugins:{legend:{labels:{color:c.text}}}
        }
      });
    }

    async function loadAll(){
      if(loading) return; loading=true; setLoading(true);
      const start=document.getElementById('start').value;
      const end=document.getElementById('end').value;
      const gran=document.getElementById('granularity').value;
      const qs=`?start=${toIsoMidnight(start)}&end=${toIsoMidnight(end)}`;
      const btn=document.getElementById('applyBtn'); btn.disabled=true;
      try{
        const [summary,byCat,byProd,series] = await Promise.all([
          jget(`/api/stats/summary${qs}`),
          jget(`/api/stats/by-category${qs}`),
          jget(`/api/stats/by-product${qs}&top=10`),
          jget(`/api/stats/series${qs}&granularity=${encodeURIComponent(gran)}`)
        ]);

        // KPIs
        document.getElementById('kTotal').textContent=fmt(summary.totalOrders);
        document.getElementById('kPaid').textContent=fmt(summary.paidOrders);
        document.getElementById('kCancelled').textContent=fmt(summary.cancelledOrders);
        document.getElementById('kRevenue').textContent=fmt(summary.revenue);
        document.getElementById('kAov').textContent=fmt(summary.avgOrderValue);

        // Line chart
        const sLabels=(series??[]).map(x=>(x.bucket??'').substring(0,10));
        const sData=(series??[]).map(x=>x.revenue??0);
        if(seriesChart) seriesChart.destroy();
        seriesChart=buildLineChart(document.getElementById('seriesChart'), sLabels, sData);

        // Bar chart
        const cLabels=(byCat??[]).map(x=>x.categoryName??'');
        const cData=(byCat??[]).map(x=>x.revenue??0);
        if(categoryChart) categoryChart.destroy();
        categoryChart=buildBarChart(document.getElementById('categoryChart'), cLabels, cData);

        // Table
        const tbody=document.querySelector('#productTable tbody');
        tbody.innerHTML='';
        (byProd??[]).forEach(p=>{
          tbody.insertAdjacentHTML('beforeend',
            `<tr><td>${p.productName??''}</td><td>${fmt(p.quantity)}</td><td>${fmt(p.revenue)}</td></tr>`);
        });

      }catch(err){
        console.error(err);
        toast('Không tải được thống kê. Kiểm tra Console để xem lỗi chi tiết.');
      }finally{
        setLoading(false); loading=false; btn.disabled=false;
      }
    }

    // HÀM XUẤT EXCEL (CSV)
    function doExport(){
      const start=document.getElementById('start').value;
      const end=document.getElementById('end').value;
      const qs=`?start=${toIsoMidnight(start)}&end=${toIsoMidnight(end)}`;
      // Gọi endpoint export mới đã được thêm vào StatsController của MVCApplication
      window.location.href=`/api/stats/export${qs}`;
    }

    document.addEventListener('DOMContentLoaded',()=>{
      // nếu layout chưa set sẵn value cho input
      if(!document.getElementById('start').value||!document.getElementById('end').value) setRangeLast7();
      document.getElementById('applyBtn').addEventListener('click',()=>loadAll());
      document.getElementById('resetBtn').addEventListener('click',()=>{setRangeLast7();loadAll();});

      // Gán sự kiện cho nút Export
      document.getElementById('exportBtn').addEventListener('click',()=>doExport());

      loadAll();
    });
</script>